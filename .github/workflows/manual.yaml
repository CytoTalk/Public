name: Manually run the actions
on:
  workflow_dispatch:
    inputs:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt;
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with unittest
        run: |
          python -m unittest
        env:
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: github_actions
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          CSRF_SECRET: ${{ secrets.CSRF_SECRET }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_DEFAULT_SENDER: ${{ secrets.MAIL_DEFAULT_SENDER }}
          APP_DEBUG: ${{ secrets.APP_DEBUG }}
          APP_ENV: ${{ secrets.APP_ENV }}
          SECURITY_PASSWORD_SALT: ${{ secrets.SECURITY_PASSWORD_SALT }}
          CLOUDINARY_NAME: ${{ secrets.CLOUDINARY_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

      - name: Deploy to Production Site
        uses: easingthemes/ssh-deploy@v2.1.4
        with:
          # Private Key
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          # Remote host
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          # Remote user
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          # Source directory
          SOURCE: ''
          # Target directory
          TARGET: ${{ secrets.REMOTE_TARGET_PROD_DIGITAL_OCEAN }}
          # Arguments to pass to rsync
          ARGS: "-rltgoDzvO"

      - name: Run Migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            cd /home/django/flask_app
            python3 manage.py db migrate
            python3 manage.py db upgrade
            systemctl restart gunicorn
            chmod -R 777 /home/django/flask_app/uploads
            chmod -R 777 /home/django/flask_app/output_location
            chmod -R 777 /home/django/flask_app/assets
